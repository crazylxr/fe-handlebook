(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{259:function(e,t,r){"use strict";r.r(t);var l=r(28),i=Object(l.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"原型、构造函数、实例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型、构造函数、实例"}},[e._v("#")]),e._v(" 原型、构造函数、实例")]),e._v(" "),r("div",{staticClass:"lake-content-editor-core lake-engine lake-typography-traditional",attrs:{"data-lake-element":"root"}},[r("h2",{attrs:{id:"原型链继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型链继承"}},[e._v("#")]),e._v(" 原型链继承")]),e._v(" "),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[r("br")]),r("ul",{staticStyle:{"list-style-type":"disc",margin:"0px","padding-left":"23px","font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word"},attrs:{"lake-indent":"0"}},[r("li",[e._v("每个构造函数都有一个原型对象")]),r("li",[e._v("原型对象都包含一个指向构造函数的指针")]),r("li",[e._v("实例都包含一个指向原型对象的内部指针")])]),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[r("br")]),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[e._v("构造函数")]),r("ul",{staticStyle:{"list-style-type":"disc",margin:"0px","padding-left":"23px","font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word"},attrs:{"lake-indent":"0"}},[r("li",[e._v("有 prototype 属性，指向一个原型对象")])]),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[e._v("实例")]),r("ul",{staticStyle:{"list-style-type":"disc",margin:"0px","padding-left":"23px","font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word"},attrs:{"lake-indent":"0"}},[r("li",[e._v("有一个私有 [[Prototype]] 指向"),r("span",[e._v("一个原型对象")])])]),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[r("span",[e._v("原型对象")])]),r("ul",{staticStyle:{"list-style-type":"disc",margin:"0px","padding-left":"23px","font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word"},attrs:{"lake-indent":"0"}},[r("li",[e._v("constuctor 属性 指向构造函数")]),r("li",[r("br")])]),e._v(" "),r("h3",{attrs:{id:"原型链继承的问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型链继承的问题"}},[e._v("#")]),e._v(" 原型链继承的问题")]),e._v(" "),r("ol",{staticStyle:{"list-style-type":"decimal",margin:"0px","padding-left":"23px","font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word"},attrs:{start:"1","lake-indent":"0"}},[r("li",[e._v("原型实例会变成另一个类型的实例，原来的实例属性会变成现在的原型属性。由于在构造函数里的引用类型会被所有实例所共享")]),r("li",[e._v("在创建子类型的实例时，不能想超类型的构造函数中传递参数。")])]),e._v(" "),r("h3",{attrs:{id:"解决方法-借用构造函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解决方法-借用构造函数"}},[e._v("#")]),e._v(" 解决方法-借用构造函数")]),e._v(" "),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[e._v("借用构造函数：在子类型构造函数的内部调用超类型构造函数。")]),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[e._v("即可以解决问题 1，也可以解决问题 2")]),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[r("br")]),e._v(" "),r("h3",{attrs:{id:"借用构造函数的问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#借用构造函数的问题"}},[e._v("#")]),e._v(" 借用构造函数的问题")]),e._v(" "),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[e._v("方法都早构造函数里，无法复用。超类型在原型中定义的方法，子类型也是不可见的，所以这种方式也很少单独使用。")]),e._v(" "),r("h2",{attrs:{id:"组合继承-伪经典继承-推荐"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#组合继承-伪经典继承-推荐"}},[e._v("#")]),e._v(" 组合继承(伪经典继承)--推荐")]),e._v(" "),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[e._v("将原型链和借用构造函数的技术组合一起。")]),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[e._v("原理就是将原型链实现对原型属性和方法的继承，而通过构造函数来实现对实例属性的继承。")]),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[r("br")]),e._v(" "),r("h2",{attrs:{id:"原型式继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原型式继承"}},[e._v("#")]),e._v(" 原型式继承")]),e._v(" "),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[e._v("Object.create()")]),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[e._v("引用类型值的属性会共享。")]),e._v(" "),r("h2",{attrs:{id:"寄生式继承"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#寄生式继承"}},[e._v("#")]),e._v(" 寄生式继承")]),e._v(" "),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[e._v("创建一个用于封装继承过程的函数，该函数在内部以某种方式来增加对象，再返回对象。")]),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[e._v("在主要考虑对象而不是自定义类型和构造函数的情况下，这是一种有用的模式。")]),e._v(" "),r("h2",{attrs:{id:"寄生组合式-最推荐"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#寄生组合式-最推荐"}},[e._v("#")]),e._v(" 寄生组合式--最推荐")]),e._v(" "),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[e._v("通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。其背后原理是：")]),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[r("br")]),r("p",{staticStyle:{"font-size":"14px",color:"rgb(38, 38, 38)","line-height":"1.74","letter-spacing":"0.05em","outline-style":"none","overflow-wrap":"break-word",margin:"0px"}},[r("br")])])])}),[],!1,null,null,null);t.default=i.exports}}]);